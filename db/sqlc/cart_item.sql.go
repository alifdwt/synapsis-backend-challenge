// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cart_item.sql

package db

import (
	"context"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (
    cart_id,
    product_id,
    quantity
) VALUES (
    $1, $2, $3
)
RETURNING id, cart_id, product_id, quantity
`

type CreateCartItemParams struct {
	CartID    string `json:"cart_id"`
	ProductID string `json:"product_id"`
	Quantity  int64  `json:"quantity"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, createCartItem, arg.CartID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_items
WHERE cart_id = $1 AND product_id = $2
`

type DeleteCartItemParams struct {
	CartID    string `json:"cart_id"`
	ProductID string `json:"product_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, arg.CartID, arg.ProductID)
	return err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, cart_id, product_id, quantity FROM cart_items
WHERE id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, id string) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getCartItemsByUserID = `-- name: GetCartItemsByUserID :many
SELECT id, cart_id, product_id, quantity FROM cart_items
WHERE cart_id = $1
`

func (q *Queries) GetCartItemsByUserID(ctx context.Context, cartID string) ([]CartItem, error) {
	rows, err := q.db.QueryContext(ctx, getCartItemsByUserID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :one
UPDATE cart_items
SET quantity = $2
WHERE cart_id = $1 AND product_id = $3
RETURNING id, cart_id, product_id, quantity
`

type UpdateCartItemParams struct {
	CartID    string `json:"cart_id"`
	Quantity  int64  `json:"quantity"`
	ProductID string `json:"product_id"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, updateCartItem, arg.CartID, arg.Quantity, arg.ProductID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}
