// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alifdwt/synapsis-backend-challenge/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/alifdwt/synapsis-backend-challenge/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/alifdwt/synapsis-backend-challenge/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCartItem mocks base method.
func (m *MockStore) CreateCartItem(arg0 context.Context, arg1 db.CreateCartItemParams) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartItem indicates an expected call of CreateCartItem.
func (mr *MockStoreMockRecorder) CreateCartItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartItem", reflect.TypeOf((*MockStore)(nil).CreateCartItem), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 db.CreateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(arg0 context.Context, arg1 db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateShoppingCart mocks base method.
func (m *MockStore) CreateShoppingCart(arg0 context.Context, arg1 string) (db.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingCart", arg0, arg1)
	ret0, _ := ret[0].(db.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingCart indicates an expected call of CreateShoppingCart.
func (mr *MockStoreMockRecorder) CreateShoppingCart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCart", reflect.TypeOf((*MockStore)(nil).CreateShoppingCart), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCartItem mocks base method.
func (m *MockStore) DeleteCartItem(arg0 context.Context, arg1 db.DeleteCartItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockStoreMockRecorder) DeleteCartItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockStore)(nil).DeleteCartItem), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// DeleteShoppingCart mocks base method.
func (m *MockStore) DeleteShoppingCart(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShoppingCart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShoppingCart indicates an expected call of DeleteShoppingCart.
func (mr *MockStoreMockRecorder) DeleteShoppingCart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShoppingCart", reflect.TypeOf((*MockStore)(nil).DeleteShoppingCart), arg0, arg1)
}

// GetCartItem mocks base method.
func (m *MockStore) GetCartItem(arg0 context.Context, arg1 string) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItem indicates an expected call of GetCartItem.
func (mr *MockStoreMockRecorder) GetCartItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItem", reflect.TypeOf((*MockStore)(nil).GetCartItem), arg0, arg1)
}

// GetCartItemsByUserID mocks base method.
func (m *MockStore) GetCartItemsByUserID(arg0 context.Context, arg1 string) ([]db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByUserID indicates an expected call of GetCartItemsByUserID.
func (mr *MockStoreMockRecorder) GetCartItemsByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByUserID", reflect.TypeOf((*MockStore)(nil).GetCartItemsByUserID), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(arg0 context.Context, arg1 string) (db.CategoriesWithProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(db.CategoriesWithProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 string) (db.OrderWithOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.OrderWithOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 string) (db.GetProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db.GetProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetShoppingCart mocks base method.
func (m *MockStore) GetShoppingCart(arg0 context.Context, arg1 string) (db.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCart", arg0, arg1)
	ret0, _ := ret[0].(db.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCart indicates an expected call of GetShoppingCart.
func (mr *MockStoreMockRecorder) GetShoppingCart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCart", reflect.TypeOf((*MockStore)(nil).GetShoppingCart), arg0, arg1)
}

// GetShoppingCartWithCartItems mocks base method.
func (m *MockStore) GetShoppingCartWithCartItems(arg0 context.Context, arg1 string) (db.ShoppingCartWithCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCartWithCartItems", arg0, arg1)
	ret0, _ := ret[0].(db.ShoppingCartWithCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCartWithCartItems indicates an expected call of GetShoppingCartWithCartItems.
func (mr *MockStoreMockRecorder) GetShoppingCartWithCartItems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCartWithCartItems", reflect.TypeOf((*MockStore)(nil).GetShoppingCartWithCartItems), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserWithProducts mocks base method.
func (m *MockStore) GetUserWithProducts(arg0 context.Context, arg1 string) (db.UsersWithProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithProducts", arg0, arg1)
	ret0, _ := ret[0].(db.UsersWithProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithProducts indicates an expected call of GetUserWithProducts.
func (mr *MockStoreMockRecorder) GetUserWithProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithProducts", reflect.TypeOf((*MockStore)(nil).GetUserWithProducts), arg0, arg1)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(arg0 context.Context, arg1 db.ListCategoriesParams) ([]db.CategoriesWithProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.CategoriesWithProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), arg0, arg1)
}

// ListOrderItemsByOrderID mocks base method.
func (m *MockStore) ListOrderItemsByOrderID(arg0 context.Context, arg1 string) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderItemsByOrderID", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderItemsByOrderID indicates an expected call of ListOrderItemsByOrderID.
func (mr *MockStoreMockRecorder) ListOrderItemsByOrderID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderItemsByOrderID", reflect.TypeOf((*MockStore)(nil).ListOrderItemsByOrderID), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(arg0 context.Context, arg1 string) ([]db.OrderWithOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderWithOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.ListProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.ListProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// ListUserWithProducts mocks base method.
func (m *MockStore) ListUserWithProducts(arg0 context.Context, arg1 db.ListUserWithProductsParams) ([]db.UsersWithProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserWithProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.UsersWithProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserWithProducts indicates an expected call of ListUserWithProducts.
func (mr *MockStoreMockRecorder) ListUserWithProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserWithProducts", reflect.TypeOf((*MockStore)(nil).ListUserWithProducts), arg0, arg1)
}

// UpdateCartItem mocks base method.
func (m *MockStore) UpdateCartItem(arg0 context.Context, arg1 db.UpdateCartItemParams) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockStoreMockRecorder) UpdateCartItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockStore)(nil).UpdateCartItem), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}
